#!/usr/bin/env python

PACKAGE = "fdm_navigation"

from dynamic_reconfigure.parameter_generator_catkin import *


gen = ParameterGenerator()
control_enum = gen.enum([gen.const("position_control", str_t, "position_control", "Position Control"),
                         gen.const("velocity_control", str_t, "velocity_control", "Velocity Control")]
                        , "Control Mode")


group_generic = gen.add_group("general")
# group_generic.add("replan_every_n",    int_t, 0, "replan_every_n",   5,   1,   20)
group_generic.add("debug",    bool_t, 0, "debug",  False)
group_generic.add("n_step_fwd",        bool_t, 1,   "Use n_step_fwd",  False)
group_generic.add("set_actions_below_threshold_to_0",    bool_t, 0, "set_actions_below_threshold_to_0",  True)
group_generic.add("vel_lin_min",     double_t, 0, "velocity minimum limit lin",  0.1, 0, 1.2)
group_generic.add("vel_ang_min",     double_t, 0, "velocity minimum limit ang",  0.1, 0, 1.0)
group_generic.add("control", str_t, 0, "Control Mode", edit_method=control_enum, default="velocity_control")



group_sc = gen.add_group("state_cost")
group_sc.add("w_early_goal_reaching",  double_t, 0, "w_early_goal_reaching",  100,    0,   300)
group_sc.add("w_early_stopping",       double_t, 0, "w_early_stopping",       30.0,   0,   100)
group_sc.add("early_goal_distance_offset",          double_t, 0, "early_goal_distance_offset in m",        0.3,   0,   1.0)
group_sc.add("early_goal_heading_offset",           double_t, 0, "early_goal_heading_offset",         0.523599,   0,   3.14)

group_sc.add("w_action_rot",           double_t, 0, "w_action_rot",           50.0,   0,   100)
group_sc.add("w_action_trans_forward", double_t, 0, "w_action_trans",         50.0,   0,   500)
group_sc.add("w_action_trans_side",    double_t, 0, "w_action_side",          200.0,   0,   500)

group_sc.add("w_fatal_unknown",        double_t, 0, "w_fatal_unknown",        200,    0,   500)
group_sc.add("w_fatal_trav",           double_t, 0, "w_fatal_trav",           1000,    0,   2000)

group_sc.add("w_risky_trav",           double_t, 0, "w_risky_trav",           0,    0,   20)
group_sc.add("w_risky_unknown",        double_t, 0, "w_risky_unknown",        0,    0,   20)

group_sc.add("w_cautious_trav",        double_t, 0, "w_cautious_trav",        0,    0,   20)
group_sc.add("w_cautious_unknown",     double_t, 0, "w_cautious_unknown",     0,    0,   20)

group_sc.add("w_velocity_tracking",    double_t, 0, "w_velocity_tracking",    0,    0,   100)
group_sc.add("w_desired_velocity",     double_t, 0, "w_desired_velocity",     0.7,    0,   1.2)


group_tc = gen.add_group("terminal_cost")
group_tc.add("w_rot_error",            double_t, 0, "Safe Risk",        50,   0,   100)
group_tc.add("w_position_error",       double_t, 0, "Watchfull Risk",   60,   0,   100)
group_tc.add("close_reward",           double_t, 0, "Close Reward",     500,   0,   1000)
group_tc.add("distance_offset",        double_t, 0, "Only within this range the rotation reward is received",   0.3,   0,   1.0)
group_tc.add("use_threshold",          bool_t, 0, "If to us terminal close reward",  True)


group_pp = gen.add_group("pp")
group_pp.add("safe_th",       double_t, 0, "Safe Region Threshold",    0.2,   0,   1)
group_pp.add("risky_th",      double_t, 0, "Risky Region Threshold",   0.4,   0,   1)
group_pp.add("fatal_th",      double_t, 0, "Fatal Region Threshold",   0.6,  0,   1)
group_pp.add("risky_value",   double_t, 0, "Risky Value",              0.4,  0,   1)
group_pp.add("fatal_value",   double_t, 0, "Fatal Value",              1.0,  0,   100)


group_pn = gen.add_group("planner_node")
group_pn.add("vel_limit_lin_x_p",     double_t, 0, "Forward Velocity X in m/s",     1.2,   0,   1.2)
group_pn.add("vel_limit_lin_y_p",     double_t, 0, "Side Velocity Y in m/s",   0.7,   0,   0.7)
group_pn.add("vel_limit_ang_p",       double_t, 0, "Angular Velocity in Rad/s",   1.0,   0,   1.0)
group_pn.add("invert_twist",          bool_t, 0,   "Invert all Published Twist Commands",  False)
group_pn.add("publish_twist",         bool_t, 0,   "Publis Twist",  False)
group_pn.add("spline_smooth_n",       int_t, 5,    "Spline Smoothing",  3,1,20)
group_pn.add("lookahead_n",           int_t, 5,    "Lookahead to Compute Twist Commands",  3,1,20)
group_sc.add("do_not_publish_distance_offset",          double_t, 0, "do_not_publish_distance_offset in m",        0.3,   0,   1.0)
group_sc.add("do_not_publish_heading_offset",           double_t, 0, "do_not_publish_heading_offset in Rad",         0.523599,   0,   3.14)


group_pn.add("do_not_publish_if_reached", bool_t, 1, "Dont publish if goal is reached",  False)


exit(gen.generate(PACKAGE, "fdm_navigation_ros", "Base"))
