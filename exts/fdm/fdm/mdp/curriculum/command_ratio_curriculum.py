# Copyright (c) 2025, ETH Zurich (Robotic Systems Lab)
# Author: Pascal Roth
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

"""Common functions that can be used to create curriculum for the learning environment.

The functions can be passed to the :class:`omni.isaac.lab.managers.CurriculumTermCfg` object to enable
the curriculum introduced by the function.
"""

from __future__ import annotations

import torch
from collections.abc import Sequence
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from omni.isaac.lab.envs import ManagerBasedRLEnv

    from ..commands import MixedCommand
    from .command_ratio_curriculum_cfg import RandomPlannerCommandRatioCurriculumCfg


class RandomPlannerCommandRatioCurriculum:
    """Curriculum that increases the ratio of commands generated by the sampling based planner instead of the random
    commands.

    The curriculum is triggered after a fix number of reset environments.
    """

    def __init__(self, cfg: RandomPlannerCommandRatioCurriculumCfg):
        """Initialize the curriculum.

        Args:
            cfg: The configuration of the curriculum.
        """
        self.cfg = cfg
        self.reset()

    @property
    def updated(self) -> bool:
        return self.env_reset_counter == 0

    @property
    def ratios(self) -> tuple[float, float]:
        """The current ratio of planner commands. [random, planner]"""
        return self._ratios

    def reset(self, env: ManagerBasedRLEnv | None = None):
        """Reset the environment counter and restore original ratios."""
        # FIXME: this method is currently not called
        self._ratios = [1 - self.cfg.start_ratio, self.cfg.start_ratio]
        self.env_reset_counter = 0
        if env is not None:
            # extract the used quantities (to enable type-hinting)
            command: MixedCommand = env.command_manager.get_term(self.cfg.command_term_name)
            # update the ratio of planner commands
            command.update_ratios(self._ratios)

    def __call__(self, env: ManagerBasedRLEnv, env_ids: Sequence[int]) -> torch.Tensor:
        """Curriculum that increases the ratio of commands generated by the sampling based planner instead of the random
        commands.

        Args:
            env: The environment.
            env_ids: The ids of the environments for which the curriculum should be applied.
            command_term_name: The name of the command term for which the curriculum should be applied.

        Returns:
            The current ratio of planner commands.
        """
        # extract the used quantities (to enable type-hinting)
        command: MixedCommand = env.command_manager.get_term(self.cfg.command_term_name)
        # update number of reset environments
        self.env_reset_counter += len(env_ids)
        # check if the curriculum should be applied
        if self.env_reset_counter >= self.cfg.update_interval:
            # check if maximum ratio is reached
            if self._ratios[1] < self.cfg.end_ratio:
                # update the ratio of planner commands
                self._ratios = [self._ratios[0] - self.cfg.update_step, self._ratios[1] + self.cfg.update_step]
                # update the ratio of planner commands
                command.update_ratios(self._ratios)
                # print the new ratio
                print(f"[INFO] Planner Command Ratio Updated, new ratio: {self._ratios[1]:.2f}")
            # reset the environment counter
            self.env_reset_counter = 0
        # return the mean terrain level
        return torch.tensor(self._ratios[0], device=env.device)

    def __name__(self):
        return "RandomPlannerCommandRatioCurriculum"
